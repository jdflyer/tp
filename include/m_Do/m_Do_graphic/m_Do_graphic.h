#ifndef M_DO_GRAPHIC_H_
#define M_DO_GRAPHIC_H_

#include "global.h"
#include "JSystem/JUtility/JUTTexture.h"

void mDoGph_Create(void);

// additional symbols needed for m_Do_graphic.cpp
// autogenerated by split.py v0.4 at 2021-01-26 05:26:23.383541
extern "C" {
    void GXClearVtxDesc(void);
    void GXCopyTex(void);
    void GXGetProjectionv(void);
    void GXGetTexBufferSize(void);
    void GXGetViewportv(void);
    void GXInitLightColor(void);
    void GXInitLightDir(void);
    void GXInitLightDistAttn(void);
    void GXInitLightPos(void);
    void GXInitLightSpot(void);
    void GXInvalidateTexAll(void);
    void GXLoadLightObjImm(void);
    void GXLoadPosMtxImm(void);
    void GXLoadTexMtxImm(void);
    void GXPixModeSync(void);
    void GXProject(void);
    void GXSetAlphaCompare(void);
    void GXSetAlphaUpdate(void);
    void GXSetChanMatColor(void);
    void GXSetClipMode(void);
    void GXSetCoPlanar(void);
    void GXSetCopyFilter(void);
    void GXSetCullMode(void);
    void GXSetCurrentMtx(void);
    void GXSetDither(void);
    void GXSetFog(void);
    void GXSetFogRangeAdj(void);
    void GXSetNumIndStages(void);
    void GXSetProjection(void);
    void GXSetScissor(void);
    void GXSetTevColorS10(void);
    void GXSetTevKAlphaSel(void);
    void GXSetTevSwapMode(void);
    void GXSetTevSwapModeTable(void);
    void GXSetTexCoordGen2(void);
    void GXSetTexCopyDst(void);
    void GXSetTexCopySrc(void);
    void GXSetViewport(void);
    void GXSetZCompLoc(void);
    void GXSetZMode(void);
    void GXSetZTexture(void);
    void J2DOrthoGraph_NS_setOrtho(void);
    void J2DOrthoGraph_NS_setPort(void);
    void J2DOrthoGraph_X1_(void);
    void J2DPrint_NS_setBuffer(void);
    void J3DSys_NS_drawInit(void);
    void J3DSys_NS_reinitGX(void);
    void JFWDisplay_NS_createManager(void);
    void JUTFader(void);
    void JUTVideo_NS_setRenderMode(void);
    void PPCSync(void);
    void __dl__FPv(void);
    void __nw__FUl(void);
    void _restgpr_17(void);
    void _restgpr_21(void);
    void _restgpr_24(void);
    void _restgpr_27(void);
    void _restgpr_28(void);
    void _savegpr_17(void);
    void _savegpr_21(void);
    void _savegpr_24(void);
    void _savegpr_27(void);
    void _savegpr_28(void);
    void alloc__7JKRHeapFUli(void);
    void alloc__7JKRHeapFUliP7JKRHeap(void);
    void cLib_addCalc__FPfffff(void);
    void cLib_memSet__FPviUl(void);
    void cXyz_NS_dtor(void);
    void createTimg(void);
    void dAttention_c_NS_LockonTruth(void);
    void dCam_getBody(void);
    void dDlst_list_c_NS_calcWipe(void);
    void dDlst_list_c_NS_draw(void);
    void dDlst_list_c_NS_drawOpaDrawList(void);
    void dDlst_list_c_NS_drawOpaListItem3d(void);
    void dDlst_list_c_NS_drawXluDrawList(void);
    void dDlst_list_c_NS_drawXluListItem3d(void);
    void dDlst_list_c_NS_init(void);
    void dDlst_list_c_NS_reset(void);
    void dDlst_shadowControl_c_NS_draw(void);
    void dDlst_shadowControl_c_NS_imageDraw(void);
    void dKy_setLight(void);
    void dMenu_Collect3D_c_NS_setupItem3D(void);
    void dPa_control_c_NS_calcMenu(void);
    void dPa_control_c_NS_draw(void);
    void dScnPly_BeforeOfPaint(void);
    void darwFilter(void);
    void drawDepth2(void);
    void drawItem3D(void);
    void fopAcIt_Judge(void);
    void free__7JKRHeapFPv(void);
    void func_80008028(void);
    void func_8000841C(void);
    void func_80008420(void);
    void func_80008450(void);
    void func_80008474(void);
    void func_8000A604(void);
    void func_8000B118(void);
    void func_8000B1D0(void);
    void func_8000B1E4(void);
    void func_803620AC(void);
    void mDoExt_adjustSolidHeap(void);
    void mDoExt_createSolidHeapToCurrent_X1_(void);
    void mDoExt_restoreCurrentHeap(void);
    void mDoGph_Create(void);
    void mDoGph_drawFilterQuad(void);
    void mDoGph_gInf_c_NS_beginRender(void);
    void mDoGph_gInf_c_NS_bloom_c_NS_create(void);
    void mDoGph_gInf_c_NS_bloom_c_NS_draw(void);
    void mDoGph_gInf_c_NS_bloom_c_NS_remove(void);
    void mDoGph_gInf_c_NS_calcFade(void);
    void mDoGph_gInf_c_NS_create(void);
    void mDoGph_gInf_c_NS_fadeOut(void);
    void mDoGph_gInf_c_NS_fadeOut_X1_(void);
    void mDoGph_gInf_c_NS_onBlure(void);
    void mDoGph_gInf_c_NS_onBlure_X1_(void);
    void mDoMtx_lookAt_X1_(void);
    void motionBlure(void);
    void retry_captue_frame(void);
    void setLight(void);
    void trimming(void);
}

// additional symbols needed for m_Do_graphic.cpp
// autogenerated by split.py v0.4 at 2021-01-26 05:26:23.383553
extern u8 lbl_80373DD0;
extern u8 lbl_803A2FD8;
extern u8 lbl_803CC9B8;
extern u8 lbl_803CC9E0;
extern u8 lbl_803DD3E8;
extern u8 lbl_803DD408;
extern u8 lbl_803DD428;
extern u8 lbl_803DD43C;
extern u8 lbl_80450590;
extern u8 lbl_80450594;
extern u8 lbl_80450598;
extern u8 lbl_8045059C;
extern u8 lbl_804505A0;
extern u8 lbl_80450600;
extern u8 lbl_80450608;
extern u8 lbl_80450BC8;
extern u8 lbl_80450BCC;
extern u8 lbl_80450BD0;
extern u8 lbl_80450BD4;
extern u8 lbl_80450BD8;
extern u8 lbl_80450BDC;
extern u8 lbl_80450BE0;
extern u8 lbl_80450BE4;
extern u8 lbl_80450BE5;
extern u8 lbl_80450BE6;
extern u8 lbl_80450BE7;
extern u8 lbl_80450BE8;
extern u8 lbl_804511C0;
extern u8 lbl_804514C8;
extern u8 lbl_80451538;
extern u8 lbl_80451558;
extern u8 lbl_80451A38;
extern u8 lbl_80451A3C;
extern u8 lbl_80451A40;
extern u8 lbl_80451A44;
extern u8 lbl_80451A48;
extern u8 lbl_80451A4C;
extern u8 lbl_80451A50;
extern u8 lbl_80451A54;
extern u8 lbl_80451A58;
extern u8 lbl_80451A60;
extern u8 lbl_80451A68;
extern u8 lbl_80451A70;
extern u8 lbl_80451A74;
extern u8 lbl_80451A78;
extern u8 lbl_80451A7C;
extern u8 lbl_80451A80;
extern u8 lbl_80451A84;
extern u8 lbl_80451A88;
extern u8 lbl_80451A8C;
extern u8 lbl_80451A90;
extern u8 lbl_80451A94;
extern u8 lbl_80451A98;
extern u8 lbl_80451A9C;
extern u8 lbl_80451AA0;
extern u8 lbl_80451AA4;
extern u8 lbl_80451AA8;
extern u8 lbl_80451AAC;
extern u8 lbl_80451AB0;
extern u8 lbl_80451AB4;
extern u8 lbl_80451AB8;
extern u8 lbl_80451ABC;
extern u8 lbl_80451AC0;
extern u8 lbl_80451AC8;
extern u8 lbl_80451AD0;
extern u8 lbl_80451AD4;
extern u8 lbl_80451AD8;
extern u8 lbl_80451ADC;
extern u8 lbl_80451AE0;
extern u8 lbl_80451AE4;
extern u8 lbl_80451AE8;
extern u8 lbl_80451AEC;
extern u8 lbl_80451AF0;
extern u8 lbl_80451AF4;
extern u8 lbl_80451AF8;
extern u8 lbl_80456B60;


#endif